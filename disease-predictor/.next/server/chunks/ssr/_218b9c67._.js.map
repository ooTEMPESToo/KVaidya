{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/majorproject/Disease-Prediction-main/Disease-Prediction-main/disease-predictor/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-1\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring inline-flex flex-1 items-center justify-center gap-1.5 rounded-md px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,KAAK,EACZ,SAAS,EACT,GAAG,OAC6C;IAChD,qBACE,8OAAC,gKAAA,CAAA,OAAkB;QACjB,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,uBAAuB;QACpC,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OAC6C;IAChD,qBACE,8OAAC,gKAAA,CAAA,OAAkB;QACjB,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,mGACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,8OAAC,gKAAA,CAAA,UAAqB;QACpB,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,2fACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,8OAAC,gKAAA,CAAA,UAAqB;QACpB,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,uBAAuB;QACpC,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://D%3A/majorproject/Disease-Prediction-main/Disease-Prediction-main/disease-predictor/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\"flex flex-col gap-1.5 px-6 py-2\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n"],"names":[],"mappings":";;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,mCAAmC;QAChD,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,0BAA0B;QACvC,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file://D%3A/majorproject/Disease-Prediction-main/Disease-Prediction-main/disease-predictor/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-primary/10 animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAAE,SAAS,EAAE,GAAG,OAAoC;IACpE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,0CAA0C;QACvD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file://D%3A/majorproject/Disease-Prediction-main/Disease-Prediction-main/disease-predictor/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"text-destructive-foreground [&>svg]:text-current *:data-[slot=alert-description]:text-destructive-foreground/80\",\n        // info: \"text-info-foreground border-slate-600/70 [&>svg]:text-current *:data-[slot=alert-title]:text-sky-800 *:data-[slot=alert-description]:text-sky-600\",\n        info: \"text-info-foreground border-info/70 [&>svg]:text-current *:data-[slot=alert-description]:text-info-foreground/80\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        \"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Alert, AlertTitle, AlertDescription };\n"],"names":[],"mappings":";;;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,qOACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,6JAA6J;YAC7J,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,SAAS,MAAM,EACb,SAAS,EACT,OAAO,EACP,GAAG,OAC8D;IACjE,qBACE,8OAAC;QACC,aAAU;QACV,MAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,+DACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,iBAAiB,EACxB,SAAS,EACT,GAAG,OACyB;IAC5B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,kGACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":["file://D%3A/majorproject/Disease-Prediction-main/Disease-Prediction-main/disease-predictor/lib/use-media-query.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\n\nexport function useMediaQuery(query: string): boolean {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    const media = window.matchMedia(query);\n\n    // Initial check\n    if (media.matches !== matches) {\n      setMatches(media.matches);\n    }\n\n    // Add listener for changes\n    const listener = () => setMatches(media.matches);\n    media.addEventListener(\"change\", listener);\n\n    // Clean up\n    return () => media.removeEventListener(\"change\", listener);\n  }, [matches, query]);\n\n  return matches;\n}\n"],"names":[],"mappings":";;;AAEA;AAFA;;AAIO,SAAS,cAAc,KAAa;IACzC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,QAAQ,OAAO,UAAU,CAAC;QAEhC,gBAAgB;QAChB,IAAI,MAAM,OAAO,KAAK,SAAS;YAC7B,WAAW,MAAM,OAAO;QAC1B;QAEA,2BAA2B;QAC3B,MAAM,WAAW,IAAM,WAAW,MAAM,OAAO;QAC/C,MAAM,gBAAgB,CAAC,UAAU;QAEjC,WAAW;QACX,OAAO,IAAM,MAAM,mBAAmB,CAAC,UAAU;IACnD,GAAG;QAAC;QAAS;KAAM;IAEnB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":["file://D%3A/majorproject/Disease-Prediction-main/Disease-Prediction-main/disease-predictor/app/stats/page.tsx"],"sourcesContent":["// \"use client\";\n\n// import { useState, useEffect } from \"react\";\n// import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n// import {\n//   Card,\n//   CardContent,\n//   CardDescription,\n//   CardHeader,\n//   CardTitle,\n// } from \"@/components/ui/card\";\n// import { Skeleton } from \"@/components/ui/skeleton\";\n// import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n// import {\n//   AlertCircle,\n//   BarChart3,\n//   PieChart,\n//   Network,\n//   Loader2,\n// } from \"lucide-react\";\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n//   ArcElement,\n//   PointElement,\n//   LineElement,\n//   RadialLinearScale,\n// } from \"chart.js\";\n// import { Bar, Pie, Radar } from \"react-chartjs-2\";\n\n// // Register ChartJS components\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   ArcElement,\n//   PointElement,\n//   LineElement,\n//   RadialLinearScale,\n//   Title,\n//   Tooltip,\n//   Legend\n// );\n\n// // Types for our data\n// interface DiseaseData {\n//   [key: string]: number;\n// }\n\n// interface SymptomData {\n//   [key: string]: number;\n// }\n\n// interface SymptomDiseaseRelation {\n//   symptom: string;\n//   diseases: string[];\n//   count: number;\n// }\n\n// export default function StatsPage() {\n//   const [diseaseData, setDiseaseData] = useState<DiseaseData>({});\n//   const [symptomData, setSymptomData] = useState<SymptomData>({});\n//   const [symptomDiseaseRelations, setSymptomDiseaseRelations] = useState<\n//     SymptomDiseaseRelation[]\n//   >([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState<string | null>(null);\n\n//   // Format text for display\n//   const formatText = (text: string) => {\n//     return text\n//       .replace(/_/g, \" \")\n//       .replace(/\\b\\w/g, (char) => char.toUpperCase());\n//   };\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       setLoading(true);\n//       setError(null);\n\n//       try {\n//         // Fetch disease stats\n//         const diseaseResponse = await fetch(\"http://localhost:5000/stats\");\n//         // await new Promise((resolve) => setTimeout(resolve, 10000));\n//         if (!diseaseResponse.ok) {\n//           throw new Error(\"Failed to fetch disease statistics\");\n//         }\n//         const diseaseData = await diseaseResponse.json();\n//         setDiseaseData(diseaseData);\n\n//         // For demonstration, we'll generate symptom data and relations\n//         // In a real app, you would fetch this from your backend\n//         generateSymptomData();\n//       } catch (err) {\n//         console.error(\"Error fetching statistics:\", err);\n//         setError(\n//           \"Failed to load statistics. Please check if the server is running.\"\n//         );\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // Generate sample symptom data for demonstration\n//   // In a real app, this would come from your backend\n//   const generateSymptomData = () => {\n//     // Sample symptom frequency data\n//     const sampleSymptomData: SymptomData = {\n//       fever: 78,\n//       cough: 65,\n//       fatigue: 60,\n//       headache: 55,\n//       nausea: 48,\n//       chest_pain: 42,\n//       abdominal_pain: 40,\n//       vomiting: 38,\n//       dizziness: 35,\n//       shortness_of_breath: 32,\n//     };\n\n//     setSymptomData(sampleSymptomData);\n\n//     // Sample symptom-disease relations\n//     const sampleRelations: SymptomDiseaseRelation[] = [\n//       {\n//         symptom: \"fever\",\n//         diseases: [\"Malaria\", \"Typhoid\", \"Influenza\"],\n//         count: 15,\n//       },\n//       {\n//         symptom: \"cough\",\n//         diseases: [\"Common Cold\", \"Pneumonia\", \"Tuberculosis\"],\n//         count: 12,\n//       },\n//       {\n//         symptom: \"headache\",\n//         diseases: [\"Migraine\", \"Hypertension\", \"Sinusitis\"],\n//         count: 10,\n//       },\n//       {\n//         symptom: \"chest_pain\",\n//         diseases: [\"Heart attack\", \"Pneumonia\", \"GERD\"],\n//         count: 8,\n//       },\n//       {\n//         symptom: \"abdominal_pain\",\n//         diseases: [\"Appendicitis\", \"Gastroenteritis\", \"Peptic ulcer\"],\n//         count: 7,\n//       },\n//     ];\n\n//     setSymptomDiseaseRelations(sampleRelations);\n//   };\n\n//   // Prepare chart data\n//   const diseaseChartData = {\n//     labels: Object.keys(diseaseData).map(formatText),\n//     datasets: [\n//       {\n//         label: \"Disease Occurrences\",\n//         data: Object.values(diseaseData),\n//         backgroundColor: \"rgba(59, 130, 246, 0.6)\",\n//         borderColor: \"rgba(59, 130, 246, 1)\",\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   const symptomChartData = {\n//     labels: Object.keys(symptomData).map(formatText),\n//     datasets: [\n//       {\n//         label: \"Symptom Frequency\",\n//         data: Object.values(symptomData),\n//         backgroundColor: [\n//           \"rgba(255, 99, 132, 0.6)\",\n//           \"rgba(54, 162, 235, 0.6)\",\n//           \"rgba(255, 206, 86, 0.6)\",\n//           \"rgba(75, 192, 192, 0.6)\",\n//           \"rgba(153, 102, 255, 0.6)\",\n//           \"rgba(255, 159, 64, 0.6)\",\n//           \"rgba(199, 199, 199, 0.6)\",\n//           \"rgba(83, 102, 255, 0.6)\",\n//           \"rgba(40, 159, 64, 0.6)\",\n//           \"rgba(210, 199, 199, 0.6)\",\n//         ],\n//         borderColor: [\n//           \"rgba(255, 99, 132, 1)\",\n//           \"rgba(54, 162, 235, 1)\",\n//           \"rgba(255, 206, 86, 1)\",\n//           \"rgba(75, 192, 192, 1)\",\n//           \"rgba(153, 102, 255, 1)\",\n//           \"rgba(255, 159, 64, 1)\",\n//           \"rgba(199, 199, 199, 1)\",\n//           \"rgba(83, 102, 255, 1)\",\n//           \"rgba(40, 159, 64, 1)\",\n//           \"rgba(210, 199, 199, 1)\",\n//         ],\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   // Prepare radar chart data for disease complexity\n//   const complexityData = {\n//     labels: [\n//       \"Malaria\",\n//       \"Tuberculosis\",\n//       \"Diabetes\",\n//       \"Hypertension\",\n//       \"Asthma\",\n//       \"Arthritis\",\n//     ],\n//     datasets: [\n//       {\n//         label: \"Average Number of Symptoms\",\n//         data: [8, 6, 5, 4, 7, 3],\n//         backgroundColor: \"rgba(59, 130, 246, 0.2)\",\n//         borderColor: \"rgba(59, 130, 246, 1)\",\n//         borderWidth: 1,\n//         pointBackgroundColor: \"rgba(59, 130, 246, 1)\",\n//         pointBorderColor: \"#fff\",\n//         pointHoverBackgroundColor: \"#fff\",\n//         pointHoverBorderColor: \"rgba(59, 130, 246, 1)\",\n//       },\n//     ],\n//   };\n\n//   const chartOptions = {\n//     responsive: true,\n//     plugins: {\n//       legend: { position: \"top\" as const },\n//       title: { display: true, text: \"Disease Statistics\" },\n//     },\n//   };\n\n//   const pieChartOptions = {\n//     responsive: true,\n//     plugins: {\n//       legend: {\n//         position: \"right\" as const,\n//         labels: {\n//           boxWidth: 15,\n//         },\n//       },\n//       title: { display: true, text: \"Symptom Frequency\" },\n//     },\n//   };\n\n//   const radarOptions = {\n//     responsive: true,\n//     plugins: {\n//       legend: { position: \"top\" as const },\n//       title: { display: true, text: \"Disease Complexity (Number of Symptoms)\" },\n//     },\n//     scales: {\n//       r: {\n//         min: 0,\n//         max: 10,\n//         ticks: {\n//           stepSize: 2,\n//         },\n//       },\n//     },\n//   };\n\n//   return (\n//     <div className=\"container mx-auto py-10 px-4\">\n//       <div className=\"max-w-5xl mx-auto space-y-8\">\n//         <div className=\"text-center space-y-2\">\n//           <h1 className=\"text-3xl font-bold\">Disease Statistics</h1>\n//           <p className=\"text-muted-foreground\">\n//             Explore insights about diseases, symptoms, and their relationships\n//           </p>\n//         </div>\n\n//         {error && (\n//           <Alert variant=\"destructive\">\n//             <AlertCircle className=\"h-4 w-4\" />\n//             <AlertTitle>Error</AlertTitle>\n//             <AlertDescription>{error}</AlertDescription>\n//           </Alert>\n//         )}\n\n//         {loading ? (\n//           <div className=\"space-y-4\">\n//             <div className=\"flex items-center justify-center space-x-2\">\n//               <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n//               <p>Loading statistics...</p>\n//             </div>\n//             <Skeleton className=\"h-[400px] w-full\" />\n//           </div>\n//         ) : (\n//           <Tabs defaultValue=\"overview\" className=\"w-full\">\n//             <TabsList className=\"grid w-full grid-cols-3\">\n//               <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n//                 <BarChart3 className=\"h-4 w-4\" />\n//                 <span>Disease Overview</span>\n//               </TabsTrigger>\n//               <TabsTrigger value=\"symptoms\" className=\"flex items-center gap-2\">\n//                 <PieChart className=\"h-4 w-4\" />\n//                 <span>Symptom Analysis</span>\n//               </TabsTrigger>\n//               <TabsTrigger\n//                 value=\"relations\"\n//                 className=\"flex items-center gap-2\"\n//               >\n//                 <Network className=\"h-4 w-4\" />\n//                 <span>Relationships</span>\n//               </TabsTrigger>\n//             </TabsList>\n\n//             <TabsContent value=\"overview\" className=\"mt-6\">\n//               <Card>\n//                 <CardHeader>\n//                   <CardTitle>Disease Distribution</CardTitle>\n//                   <CardDescription>\n//                     Overview of diseases in our dataset\n//                   </CardDescription>\n//                 </CardHeader>\n//                 <CardContent>\n//                   <div className=\"h-[400px]\">\n//                     <Bar data={diseaseChartData} options={chartOptions} />\n//                   </div>\n//                 </CardContent>\n//               </Card>\n//             </TabsContent>\n\n//             <TabsContent value=\"symptoms\" className=\"mt-6 space-y-6\">\n//               <Card>\n//                 <CardHeader>\n//                   <CardTitle>Symptom Frequency</CardTitle>\n//                   <CardDescription>\n//                     Most common symptoms across all diseases\n//                   </CardDescription>\n//                 </CardHeader>\n//                 <CardContent>\n//                   <div className=\"h-[400px]\">\n//                     <Pie data={symptomChartData} options={pieChartOptions} />\n//                   </div>\n//                 </CardContent>\n//               </Card>\n\n//               <Card>\n//                 <CardHeader>\n//                   <CardTitle>Disease Complexity</CardTitle>\n//                   <CardDescription>\n//                     Number of symptoms typically associated with each disease\n//                   </CardDescription>\n//                 </CardHeader>\n//                 <CardContent>\n//                   <div className=\"h-[400px]\">\n//                     <Radar data={complexityData} options={radarOptions} />\n//                   </div>\n//                 </CardContent>\n//               </Card>\n//             </TabsContent>\n\n//             <TabsContent value=\"relations\" className=\"mt-6\">\n//               <Card>\n//                 <CardHeader>\n//                   <CardTitle>Symptom-Disease Relationships</CardTitle>\n//                   <CardDescription>\n//                     Which symptoms are most predictive of which diseases\n//                   </CardDescription>\n//                 </CardHeader>\n//                 <CardContent>\n//                   <div className=\"space-y-6\">\n//                     {symptomDiseaseRelations.map((relation) => (\n//                       <div\n//                         key={relation.symptom}\n//                         className=\"border rounded-lg p-4\"\n//                       >\n//                         <h3 className=\"text-lg font-medium mb-2\">\n//                           {formatText(relation.symptom)}\n//                         </h3>\n//                         <div className=\"flex flex-wrap gap-2 mb-2\">\n//                           {relation.diseases.map((disease) => (\n//                             <span\n//                               key={disease}\n//                               className=\"px-2 py-1 bg-primary/10 text-primary rounded-full text-sm\"\n//                             >\n//                               {disease}\n//                             </span>\n//                           ))}\n//                         </div>\n//                         <p className=\"text-sm text-muted-foreground\">\n//                           Associated with {relation.count} disease patterns\n//                         </p>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 </CardContent>\n//               </Card>\n//             </TabsContent>\n//           </Tabs>\n//         )}\n\n//         <Card className=\"bg-muted/40\">\n//           <CardHeader>\n//             <CardTitle>About the Statistics</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <p className=\"text-sm text-muted-foreground\">\n//               These statistics are derived from our disease prediction\n//               model&apos;s training data. The visualizations show disease\n//               distribution, symptom frequency, disease complexity (number of\n//               symptoms per disease), and symptom-disease relationships. This\n//               information can help understand patterns in disease diagnosis and\n//               symptom presentation.\n//             </p>\n//           </CardContent>\n//         </Card>\n//       </div>\n//     </div>\n//   );\n// }\n\n\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport {\n  AlertCircle,\n  BarChart3,\n  PieChart,\n  Network,\n  Loader2,\n} from \"lucide-react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  PointElement,\n  LineElement,\n  RadialLinearScale,\n} from \"chart.js\";\nimport { Bar, Pie, Radar } from \"react-chartjs-2\";\nimport { useMediaQuery } from \"@/lib/use-media-query\";\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  ArcElement,\n  PointElement,\n  LineElement,\n  RadialLinearScale,\n  Title,\n  Tooltip,\n  Legend\n);\n\n// Types for our data\ninterface DiseaseData {\n  [key: string]: number;\n}\n\ninterface SymptomData {\n  [key: string]: number;\n}\n\ninterface SymptomDiseaseRelation {\n  symptom: string;\n  diseases: string[];\n  count: number;\n}\n\nexport default function StatsPage() {\n  const [diseaseData, setDiseaseData] = useState<DiseaseData>({});\n  const [symptomData, setSymptomData] = useState<SymptomData>({});\n  const [symptomDiseaseRelations, setSymptomDiseaseRelations] = useState<\n    SymptomDiseaseRelation[]\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const isMobile = useMediaQuery(\"(max-width: 768px)\");\n\n  // Format text for display\n  const formatText = (text: string) => {\n    return text\n      .replace(/_/g, \" \")\n      .replace(/\\b\\w/g, (char) => char.toUpperCase());\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        // Fetch disease stats\n        const diseaseResponse = await fetch(\"http://localhost:5000/stats\");\n        if (!diseaseResponse.ok) {\n          throw new Error(\"Failed to fetch disease statistics\");\n        }\n        const diseaseData = await diseaseResponse.json();\n        setDiseaseData(diseaseData);\n\n        // For demonstration, we'll generate symptom data and relations\n        // In a real app, you would fetch this from your backend\n        generateSymptomData();\n      } catch (err) {\n        console.error(\"Error fetching statistics:\", err);\n        setError(\n          \"Failed to load statistics. Please check if the server is running.\"\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Generate sample symptom data for demonstration\n  // In a real app, this would come from your backend\n  const generateSymptomData = () => {\n    // Sample symptom frequency data\n    const sampleSymptomData: SymptomData = {\n      fever: 78,\n      cough: 65,\n      fatigue: 60,\n      headache: 55,\n      nausea: 48,\n      chest_pain: 42,\n      abdominal_pain: 40,\n      vomiting: 38,\n      dizziness: 35,\n      shortness_of_breath: 32,\n    };\n\n    setSymptomData(sampleSymptomData);\n\n    // Sample symptom-disease relations\n    const sampleRelations: SymptomDiseaseRelation[] = [\n      {\n        symptom: \"fever\",\n        diseases: [\"Malaria\", \"Typhoid\", \"Influenza\"],\n        count: 15,\n      },\n      {\n        symptom: \"cough\",\n        diseases: [\"Common Cold\", \"Pneumonia\", \"Tuberculosis\"],\n        count: 12,\n      },\n      {\n        symptom: \"headache\",\n        diseases: [\"Migraine\", \"Hypertension\", \"Sinusitis\"],\n        count: 10,\n      },\n      {\n        symptom: \"chest_pain\",\n        diseases: [\"Heart attack\", \"Pneumonia\", \"GERD\"],\n        count: 8,\n      },\n      {\n        symptom: \"abdominal_pain\",\n        diseases: [\"Appendicitis\", \"Gastroenteritis\", \"Peptic ulcer\"],\n        count: 7,\n      },\n    ];\n\n    setSymptomDiseaseRelations(sampleRelations);\n  };\n\n  // Prepare chart data\n  const diseaseChartData = {\n    labels: Object.keys(diseaseData).map(formatText),\n    datasets: [\n      {\n        label: \"Disease Occurrences\",\n        data: Object.values(diseaseData),\n        backgroundColor: \"rgba(59, 130, 246, 0.6)\",\n        borderColor: \"rgba(59, 130, 246, 1)\",\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const symptomChartData = {\n    labels: Object.keys(symptomData).map(formatText),\n    datasets: [\n      {\n        label: \"Symptom Frequency\",\n        data: Object.values(symptomData),\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.6)\",\n          \"rgba(54, 162, 235, 0.6)\",\n          \"rgba(255, 206, 86, 0.6)\",\n          \"rgba(75, 192, 192, 0.6)\",\n          \"rgba(153, 102, 255, 0.6)\",\n          \"rgba(255, 159, 64, 0.6)\",\n          \"rgba(199, 199, 199, 0.6)\",\n          \"rgba(83, 102, 255, 0.6)\",\n          \"rgba(40, 159, 64, 0.6)\",\n          \"rgba(210, 199, 199, 0.6)\",\n        ],\n        borderColor: [\n          \"rgba(255, 99, 132, 1)\",\n          \"rgba(54, 162, 235, 1)\",\n          \"rgba(255, 206, 86, 1)\",\n          \"rgba(75, 192, 192, 1)\",\n          \"rgba(153, 102, 255, 1)\",\n          \"rgba(255, 159, 64, 1)\",\n          \"rgba(199, 199, 199, 1)\",\n          \"rgba(83, 102, 255, 1)\",\n          \"rgba(40, 159, 64, 1)\",\n          \"rgba(210, 199, 199, 1)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  // Prepare radar chart data for disease complexity\n  const complexityData = {\n    labels: [\n      \"Malaria\",\n      \"Tuberculosis\",\n      \"Diabetes\",\n      \"Hypertension\",\n      \"Asthma\",\n      \"Arthritis\",\n    ],\n    datasets: [\n      {\n        label: \"Average Number of Symptoms\",\n        data: [8, 6, 5, 4, 7, 3],\n        backgroundColor: \"rgba(59, 130, 246, 0.2)\",\n        borderColor: \"rgba(59, 130, 246, 1)\",\n        borderWidth: 1,\n        pointBackgroundColor: \"rgba(59, 130, 246, 1)\",\n        pointBorderColor: \"#fff\",\n        pointHoverBackgroundColor: \"#fff\",\n        pointHoverBorderColor: \"rgba(59, 130, 246, 1)\",\n      },\n    ],\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: isMobile ? (\"bottom\" as const) : (\"top\" as const),\n        labels: {\n          boxWidth: isMobile ? 10 : 15,\n          font: {\n            size: isMobile ? 10 : 12,\n          },\n        },\n      },\n      title: {\n        display: true,\n        text: \"Disease Statistics\",\n        font: {\n          size: isMobile ? 14 : 16,\n        },\n      },\n    },\n    scales: {\n      x: {\n        ticks: {\n          maxRotation: isMobile ? 90 : 0,\n          minRotation: isMobile ? 90 : 0,\n          font: {\n            size: isMobile ? 8 : 12,\n          },\n        },\n      },\n      y: {\n        ticks: {\n          font: {\n            size: isMobile ? 8 : 12,\n          },\n        },\n      },\n    },\n  };\n\n  const pieChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: isMobile ? (\"bottom\" as const) : (\"right\" as const),\n        labels: {\n          boxWidth: isMobile ? 10 : 15,\n          font: {\n            size: isMobile ? 10 : 12,\n          },\n        },\n      },\n      title: {\n        display: true,\n        text: \"Symptom Frequency\",\n        font: {\n          size: isMobile ? 14 : 16,\n        },\n      },\n    },\n  };\n\n  const radarOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: isMobile ? (\"bottom\" as const) : (\"top\" as const),\n        labels: {\n          boxWidth: isMobile ? 10 : 15,\n          font: {\n            size: isMobile ? 10 : 12,\n          },\n        },\n      },\n      title: {\n        display: true,\n        text: \"Disease Complexity\",\n        font: {\n          size: isMobile ? 14 : 16,\n        },\n      },\n    },\n    scales: {\n      r: {\n        min: 0,\n        max: 10,\n        ticks: {\n          stepSize: 2,\n          font: {\n            size: isMobile ? 8 : 10,\n          },\n        },\n        pointLabels: {\n          font: {\n            size: isMobile ? 8 : 10,\n          },\n        },\n      },\n    },\n  };\n\n  return (\n    <div className=\"container mx-auto py-6 px-4\">\n      <div className=\"max-w-5xl mx-auto space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-2xl md:text-3xl font-bold\">Disease Statistics</h1>\n          <p className=\"text-sm md:text-base text-muted-foreground\">\n            Explore insights about diseases, symptoms, and their relationships\n          </p>\n        </div>\n\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {loading ? (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n              <p>Loading statistics...</p>\n            </div>\n            <Skeleton className=\"h-[300px] md:h-[400px] w-full\" />\n          </div>\n        ) : (\n          <Tabs defaultValue=\"overview\" className=\"w-full\">\n            {/* <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger\n                value=\"overview\"\n                className=\"flex items-center gap-1 md:gap-2 text-xs md:text-sm\"\n              >\n                <BarChart3 className=\"h-3 w-3 md:h-4 md:w-4\" />\n                <span className=\"hidden xs:inline\">Disease</span> Overview\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"symptoms\"\n                className=\"flex items-center gap-1 md:gap-2 text-xs md:text-sm\"\n              >\n                <PieChart className=\"h-3 w-3 md:h-4 md:w-4\" />\n                <span className=\"hidden xs:inline\">Symptom</span> Analysis\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"relations\"\n                className=\"flex items-center gap-1 md:gap-2 text-xs md:text-sm\"\n              >\n                <Network className=\"h-3 w-3 md:h-4 md:w-4\" />\n                Relationships\n              </TabsTrigger>\n            </TabsList> */}\n{/* \n            <TabsContent value=\"overview\" className=\"mt-4 md:mt-6\">\n              <Card>\n                <CardHeader className=\"pb-2 md:pb-4\">\n                  <CardTitle className=\"text-lg md:text-xl\">\n                    Disease Distribution\n                  </CardTitle>\n                  <CardDescription className=\"text-xs md:text-sm\">\n                    Overview of diseases in our dataset\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[300px] md:h-[400px] w-full\">\n                    <Bar data={diseaseChartData} options={chartOptions} />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent\n              value=\"symptoms\"\n              className=\"mt-4 md:mt-6 space-y-4 md:space-y-6\"\n            >\n              <Card>\n                <CardHeader className=\"pb-2 md:pb-4\">\n                  <CardTitle className=\"text-lg md:text-xl\">\n                    Symptom Frequency\n                  </CardTitle>\n                  <CardDescription className=\"text-xs md:text-sm\">\n                    Most common symptoms across all diseases\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[300px] md:h-[400px] w-full\">\n                    <Pie data={symptomChartData} options={pieChartOptions} />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"pb-2 md:pb-4\">\n                  <CardTitle className=\"text-lg md:text-xl\">\n                    Disease Complexity\n                  </CardTitle>\n                  <CardDescription className=\"text-xs md:text-sm\">\n                    Number of symptoms typically associated with each disease\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[300px] md:h-[400px] w-full\">\n                    <Radar data={complexityData} options={radarOptions} />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent> */}\n\n            <TabsContent value=\"relations\" className=\"mt-4 md:mt-6\">\n              <Card>\n                <CardHeader className=\"pb-2 md:pb-4\">\n                  <CardTitle className=\"text-lg md:text-xl\">\n                    Symptom-Disease Relationships\n                  </CardTitle>\n                  <CardDescription className=\"text-xs md:text-sm\">\n                    Which symptoms are most predictive of which diseases\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {symptomDiseaseRelations.map((relation) => (\n                      <div\n                        key={relation.symptom}\n                        className=\"border rounded-lg p-3 md:p-4\"\n                      >\n                        <h3 className=\"text-base md:text-lg font-medium mb-2\">\n                          {formatText(relation.symptom)}\n                        </h3>\n                        <div className=\"flex flex-wrap gap-1 md:gap-2 mb-2\">\n                          {relation.diseases.map((disease) => (\n                            <span\n                              key={disease}\n                              className=\"px-2 py-1 bg-primary/10 text-primary rounded-full text-xs md:text-sm\"\n                            >\n                              {disease}\n                            </span>\n                          ))}\n                        </div>\n                        <p className=\"text-xs md:text-sm text-muted-foreground\">\n                          Associated with {relation.count} disease patterns\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        )}\n\n        <Card className=\"bg-muted/40\">\n          <CardHeader className=\"pb-2 md:pb-4\">\n            <CardTitle className=\"text-lg md:text-xl\">\n              About the Statistics\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-xs md:text-sm text-muted-foreground\">\n              These statistics are derived from our disease prediction\n              model&apos;s training data. The visualizations show disease\n              distribution, symptom frequency, disease complexity (number of\n              symptoms per disease), and symptom-disease relationships. This\n              information can help understand patterns in disease diagnosis and\n              symptom presentation.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1235, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}