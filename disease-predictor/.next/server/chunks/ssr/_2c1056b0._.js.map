{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/html/Main%20projects/Disease-Prediction-main/disease-predictor/app/predict/action/getAIGenText.ts"],"sourcesContent":["\"use server\";\n\n//import { HfInference } from \"@huggingface/inference\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// export async function GetAIGenText(prediction: string) {\n//   console.log(\"is this running client or server side\");\n//   try {\n//     const client = new HfInference(process.env.HF_Original_apiKey);\n\n//     const chatCompletion = await client.chatCompletion({\n//       model: \"deepseek-ai/DeepSeek-R1\",\n//       messages: [\n//         {\n//           role: \"user\",\n//           content:\n//             \"Give a brief overview with just the description of the disease and a small cause (3sentences maximum) of the disease:  \" +\n//             prediction,\n//         },\n//       ],\n//       provider: \"fireworks-ai\",\n//       // max_tokens: 500,\n//     });\n\n//     console.log(chatCompletion.choices[0].message);\n\n//     // Get the raw content\n//     let content = chatCompletion.choices[0].message.content;\n//     // Check for failure cases\n//     if (\n//       !content ||\n//       content === \"I am sorry, I do not know the answer to that question.\"\n//     ) {\n//       return {\n//         success: false,\n//         message: \"I am sorry, I do not know the answer to that question.\",\n//       };\n//     }\n\n//     // Remove <think> section\n//     const thinkEndIndex = content.indexOf(\"</think>\");\n//     if (thinkEndIndex !== -1) {\n//       content = content.substring(thinkEndIndex + 8).trim(); // +8 to skip '</think>'\n//     }\n\n//     // Format **{anything}** to bold using <strong> tags\n//     content = content.replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\n\n//     // Trim and split into sentences, take up to 3\n//     const sentences = content\n//       .trim()\n//       .split(/(?<=\\.)\\s+/)\n//       .filter((s) => s.length > 0)\n//       .slice(0, 3)\n//       .join(\" \");\n//     // Format **{anything}** to bold using <strong> tags\n\n//     // setMessage(chatCompletion.choices[0].message.content);\n//     return {\n//       success: true,\n//       message: sentences,\n//     };\n//   } catch (e) {\n//     console.error(\"Received eror: \", e);\n//     return {\n//       success: false,\n//       message: \"I am sorry, I do not know the answer to that question.\",\n//     };\n//   }\n// }\n\nexport async function GetGeminiGenText(prediction: string) {\n  try {\n    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n    const prompt = `Give a brief overview with just the description of the disease and a small cause (3 sentences maximum) of the disease: ${prediction}`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    // console.dir(response, { depth: null });\n    const text = response.text();\n\n    // console.log(text);\n    if (!text) {\n      return {\n        success: false,\n        message: \"Failed to get a response from Gemini.\",\n      };\n    }\n\n    // Format **{anything}** to bold using <strong> tags\n    const formattedText = text.replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\n\n    // Trim and split into sentences, take up to 3\n    const sentences = formattedText\n      .trim()\n      .split(/(?<=\\.)\\s+/)\n      .filter((s) => s.length > 0)\n      .slice(0, 3)\n      .join(\" \");\n\n    return {\n      success: true,\n      message: sentences,\n    };\n  } catch (error) {\n    console.error(\"Gemini API error:\", error);\n    return {\n      success: false,\n      message: \"Failed to get information. Please try again later.\",\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA,uDAAuD;AACvD;;;;;AAoEO,eAAe,uCAAc,GAAd,iBAAiB,UAAkB;IACvD,IAAI;QACF,MAAM,QAAQ,IAAI,8JAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;QAC/D,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAmB;QAEnE,MAAM,SAAS,CAAC,uHAAuH,EAAE,YAAY;QAErJ,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,WAAW,MAAM,OAAO,QAAQ;QACtC,0CAA0C;QAC1C,MAAM,OAAO,SAAS,IAAI;QAE1B,qBAAqB;QACrB,IAAI,CAAC,MAAM;YACT,OAAO;gBACL,SAAS;gBACT,SAAS;YACX;QACF;QAEA,oDAAoD;QACpD,MAAM,gBAAgB,KAAK,OAAO,CAAC,kBAAkB;QAErD,8CAA8C;QAC9C,MAAM,YAAY,cACf,IAAI,GACJ,KAAK,CAAC,cACN,MAAM,CAAC,CAAC,IAAM,EAAE,MAAM,GAAG,GACzB,KAAK,CAAC,GAAG,GACT,IAAI,CAAC;QAER,OAAO;YACL,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO;YACL,SAAS;YACT,SAAS;QACX;IACF;AACF;;;IA1CsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file://D%3A/html/Main%20projects/Disease-Prediction-main/disease-predictor/app/predict/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/predict/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/predict/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwR,GACrT,sDACA","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file://D%3A/html/Main%20projects/Disease-Prediction-main/disease-predictor/app/predict/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/predict/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/predict/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoQ,GACjS,kCACA","debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}