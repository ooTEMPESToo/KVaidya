{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/majorproject/Disease-Prediction-main/Disease-Prediction-main/disease-predictor/app/reports/page.tsx"],"sourcesContent":["// \"use client\";\r\n// import React, { useState, useCallback } from \"react\";\r\n// import { useDropzone } from \"react-dropzone\";\r\n\r\n// const ReportPage = () => {\r\n//   const [file, setFile] = useState<File | null>(null);\r\n//   const [message, setMessage] = useState(\"\");\r\n//   const [response, setResponse] = useState<string | null>(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [question, setQuestion] = useState(\"\");\r\n//   const [fileUploaded, setFileUploaded] = useState(false);\r\n\r\n//   const handleFileChange = (selectedFile: File | null) => {\r\n//     if (!selectedFile) return;\r\n//     if (selectedFile.type !== \"application/pdf\") {\r\n//       setMessage(\"Only PDF files are allowed.\");\r\n//       return;\r\n//     }\r\n//     if (selectedFile.size > 5 * 1024 * 1024) {\r\n//       setMessage(\"File size should be less than 5MB.\");\r\n//       return;\r\n//     }\r\n//     setFile(selectedFile);\r\n//     setFileUploaded(false); // reset when user re-uploads\r\n//     setMessage(\"\");\r\n//   };\r\n\r\n//   const onDrop = useCallback((acceptedFiles: File[]) => {\r\n//     if (acceptedFiles.length > 0) {\r\n//       handleFileChange(acceptedFiles[0]);\r\n//     }\r\n//   }, []);\r\n\r\n//   const { getRootProps, getInputProps } = useDropzone({\r\n//     onDrop,\r\n//     accept: { \"application/pdf\": [] },\r\n//     maxSize: 5 * 1024 * 1024,\r\n//   });\r\n\r\n//   const handleFileUpload = async () => {\r\n//     if (!file) {\r\n//       setMessage(\"Please upload a file.\");\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"file\", file); // âœ… KEY SHOULD BE \"file\"\r\n\r\n//     try {\r\n//       const res = await fetch(\"/report/action/uploadReport\", {\r\n//         method: \"POST\",\r\n//         body: formData,\r\n//       });\r\n\r\n//       const data = await res.json();\r\n//       console.log(data);\r\n\r\n//       if (!res.ok) throw new Error(data.message || \"Failed to upload\");\r\n\r\n//       setResponse(data.response || \"File processed successfully!\");\r\n//     } catch (err) {\r\n//       setMessage(err instanceof Error ? err.message : \"Upload failed.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAskQuestion = async () => {\r\n//     if (!fileUploaded) {\r\n//       setMessage(\"Please upload a PDF file first.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!question.trim()) {\r\n//       setMessage(\"Please enter a question.\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     setMessage(\"\");\r\n\r\n//     try {\r\n//       const askResponse = await fetch(\"http://localhost:5000/ask\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({ question }),\r\n//       });\r\n\r\n//       if (!askResponse.ok) throw new Error(\"Failed to get an answer.\");\r\n\r\n//       const askResult = await askResponse.json();\r\n//       setResponse(askResult.answer);\r\n//     } catch (error) {\r\n//       setMessage(error instanceof Error ? error.message : \"An error occurred.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\">\r\n//       <h1 className=\"text-2xl font-bold mb-4\">Upload Medical Report</h1>\r\n\r\n//       <div\r\n//         {...getRootProps()}\r\n//         className=\"border-2 border-dashed p-6 text-center cursor-pointer rounded-lg\"\r\n//       >\r\n//         <input {...getInputProps()} />\r\n//         <p className=\"text-gray-600\">\r\n//           Drag & drop a PDF file here, or click to select one.\r\n//         </p>\r\n//       </div>\r\n\r\n//       {file && (\r\n//         <p className=\"mt-2 text-gray-700 text-sm\">\r\n//           Selected file: <strong>{file.name}</strong>\r\n//         </p>\r\n//       )}\r\n\r\n//       <button\r\n//         onClick={handleFileUpload}\r\n//         className=\"mt-4 w-full py-2 bg-black text-white rounded-lg\"\r\n//         disabled={loading}\r\n//       >\r\n//         {loading ? \"Processing...\" : \"Upload\"}\r\n//       </button>\r\n\r\n//       <h2 className=\"mt-6 text-lg font-bold\">Ask a Question:</h2>\r\n//       <input\r\n//         type=\"text\"\r\n//         value={question}\r\n//         onChange={(e) => setQuestion(e.target.value)}\r\n//         className=\"w-full p-2 border rounded mt-2\"\r\n//         placeholder=\"Enter your question\"\r\n//       />\r\n//       <button\r\n//         onClick={handleAskQuestion}\r\n//         className=\"mt-4 w-full py-2 bg-black text-white rounded-lg\"\r\n//         disabled={loading}\r\n//       >\r\n//         {loading ? \"Fetching Answer...\" : \"Ask\"}\r\n//       </button>\r\n\r\n//       {message && <p className=\"mt-4 text-center text-gray-700\">{message}</p>}\r\n//       {response && (\r\n//         <div className=\"mt-6 p-4 bg-gray-100 rounded-lg\">\r\n//           <h2 className=\"text-lg font-semibold mb-2\">Response:</h2>\r\n//           <p className=\"text-sm text-gray-800\">{response}</p>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ReportPage;\r\n\r\n// app/report/page.jsx\r\n'use client';\r\n\r\nimport { useState } from \"react\";\r\n\r\nexport default function Home() {\r\n  const [file, setFile] = useState<File | null>(null);\r\n  const [summary, setSummary] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleUpload = async () => {\r\n    if (!file) return;\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    setLoading(true);\r\n    const res = await fetch(\"http://localhost:5000/upload-pdf/\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n\r\n    const data = await res.json();\r\n    setSummary(data.summary);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex flex-col items-center justify-center min-h-screen p-4 bg-gray-100\">\r\n      <div className=\"bg-white p-6 rounded shadow w-full max-w-md\">\r\n        <h1 className=\"text-xl font-bold mb-4\">Upload PDF for Summary</h1>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"application/pdf\"\r\n          onChange={(e) => setFile(e.target.files?.[0] || null)}\r\n          className=\"mb-4\"\r\n        />\r\n        <button\r\n          onClick={handleUpload}\r\n          className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\r\n        >\r\n          {loading ? \"Summarizing...\" : \"Upload & Summarize\"}\r\n        </button>\r\n        {summary && (\r\n          <div className=\"mt-6\">\r\n            <h2 className=\"font-semibold mb-2\">Summary:</h2>\r\n            <p className=\"text-gray-700 whitespace-pre-wrap\">{summary}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}